[
  {
    "id": 1,
    "question": "What is context in react?",
    "answer": "It's another way to pass data through components to avoid prop drilling.  It's meant to share data that would be considered global."
  },
  {
    "id": 2,
    "question": "What's the difference between functional components and class components?",
    "answer": "Functional components don't have access to lifecycle methods the way class components do, but they do have hooks to achieve similar functionality"
  },
  {
    "id": 3,
    "question": "Explain the virtual DOM in react",
    "answer": "React doesn't manipulate the DOM directly, instead, it has a virtual DOM which is basically a copy. When state, props or context change, it looks for differences in the virtual DOM's previous and current state and applies the changes and renders the components."
  },
  {
    "id": 4,
    "question": "What is jsx?",
    "answer": "It stands for javascript and xml.  Basically it lets you write HTML in a javascript file."
  },
  {
    "id": 5,
    "question": "Why is 'class' called 'className' in react?",
    "answer": "Class is a reserved keyword in javascript.  You'll get an error if you try to use class.  Since JSX gets compiled, javascript will think you're trying to create a class and not style an element"
  },
  {
    "id": 6,
    "question": "Describe dataflow in react",
    "answer": "Dataflow is unidirectional or one way. All of the components in react have a parent/child relationship so you're passing data down from above (parent to child).  This data is props."
  },
  {
    "id": 7,
    "question": "What is a prop in react?",
    "answer": "A prop or properties is an arguement passed in a react component.  It's data passed down from a parent to a child component."
  },
  {
    "id": 8,
    "question": "How do you pass a prop from the child back up to the parent component?",
    "answer": "You would pass it through a callback function."
  },
  {
    "id": 9,
    "question": "What is state in react?",
    "answer": "It's in object that contains data or information about the component.  That state may change over time and when it does, the component re-renders."
  },
  {
    "id": 10,
    "question": "What is the difference between a controlled and uncontrolled component?",
    "answer": "Controlled components rely on the React's state to manage the form data, while uncontrolled components use the DOM itself.  For example if you have a form that uses onChange in the inputs to store user input in a state, this is a controlled component.  Whereas, if you used `useRef` instead, this would be considered using the DOM."
  },
  {
    "id": 11,
    "question": "What is React?",
    "answer": "React is an open-source javascript library developed by facebook.  It's used to create reusable UI components and web applications"
  },
  {
    "id": 12,
    "question": "What are the benefits of using react?",
    "answer": "Reusable components, fast rendering thanks to the virtual DOM, there's an active ReactJS community so finding solutions to specific issues isn't too difficult."
  },
  {
    "id": 13,
    "question": "How do you create components in react?",
    "answer": "There's two ways: one is by creating a function component and the other is a class component."
  },
  {
    "id": 14,
    "question": "How do you conditionally render components?",
    "answer": "JSX doesn't render false or undefinded.  So if you use short-circuiting (like the double ampersand symbol) or a ternary, you can conditionally render components."
  },
  {
    "id": 15,
    "question": "What are the stages a React component goes through or what happens during the lifecycle of a React component?",
    "answer": "The lifecycle has four stages: 1. Initialization - The component is contructed with the given props and default state. This is done in the constructor of a component class  2. Mounting - The component is mounted on the DOM and rendered for the first time.  3. Updating - The state and props of a component are updated and the application is repainted. 4. Unmounting - The component is removed from the page and unmounted from the DOM."
  },
  {
    "id": 16,
    "question": "What are react components? Why are components so important to react?",
    "answer": "Components are the building materials used in React to create websites and application UI. Components are important to React because they break a UI down into reusable parts."
  },
  {
    "id": 17,
    "question": "Whats the difference between props and state?",
    "answer": "State describes a changeable default data value in a react component.  It's subject to change with time.  Props or properties doesn't changed and is used to pass data from one component to another."
  },
  {
    "id": 18,
    "question": "When would you use a class component over a functional component?",
    "answer": "Functional components for the most part can access lifecycle methods thanks to hooks like useEffect.  However, they still can't implement error boundaries the way class components can."
  },
  {
    "id": 19,
    "question": "What are the building blocks of React?",
    "answer": "Components, JSX, props and state, context, and the virtual DOM"
  },
  {
    "id": 20,
    "question": "What is a key in React?",
    "answer": "A key is an attribute you need to include when creating lists of elements in React. Keys are used in React to identify which items in the list are changed, updated, or deleted. In other words, we can say that keys are used to give an identity to the elements in the lists."
  },
  {
    "id": 21,
    "question": "How would you delay an API call until a component has mounted?",
    "answer": "I'm not super familiar with class components but I believe there is a lifecycle method component did mount so you can use that and then make the API call.  In a function component, you can use the useEffect hook and pass an empty array in the second arguement.  If you leave it empty it basically mimics component did mount, so it'll wait until then to make the API call."
  }
]
